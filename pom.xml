<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.lai.demo</groupId>
	<artifactId>springBootDemo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	
	<!-- 
		packaging值(默认jar)变成war包，使用maven命令打war包时，在项目新建webapp/web-info/web.xml,就可以打成war包 
		如果<packaging>pom</packaging>就是使用多模块,接着添加包含模块,如下包含几个模块
			<modules>
	       	 	<module>service</module>
	        	<module>web</module>
	       		<module>model</module>
	    	</modules>
	    	
	    	然后new一个模块，如web模块，在web的pom.xml添加如下
	    	<artifactId>web</artifactId> //表示当前模块名称
	    	<dependency>                 //然后controller需要调用service层,需要添加service层的依赖，如下
	            <groupId>com.lai.demo</groupId>
	            <artifactId>tyzf-service</artifactId>
	            <version>0.0.1-SNAPSHOT</version>
	        </dependency>
	        
	               然后new一个service模块,在service模块的pom.xml添加如下
	        <artifactId>service</artifactId> // 表示当前模块名称
	    	<dependency>                 	 //然后service层需要调用dao层,需要添加dao层的依赖，如下
	            <groupId>com.lai.demo</groupId>
	            <artifactId>model</artifactId>
	            <version>0.0.1-SNAPSHOT</version>
	        </dependency>
	 -->
	<packaging>jar</packaging>
	
	<name>springBootDemo</name>
	<description>Demo project for Spring Boot</description>
	
	<!-- 
		SpringBoot继承的起步依赖spring-boot-starter-parent 会自动为我们引入spring相关的依赖。
		查看源码可以看到默认加载resources下的以application开头的配置文件和各种插件,并且还继承了spring-boot-dependencies.
		继续查看spring-boot-dependencies的源码,主要看<properties>之间的内容,里面包含了各种依赖包的版本号,继续看<dependencyManagement>里面的内容,引入了jar包.
	 	这下就可以看出来继承的起步依赖主要是为了进行jar包的版本控制的.这样我们在pom文件中导入依赖就不需要指定版本了.
	 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.0.RELEASE</version>
		<relativePath/>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		 <!-- 核心模块，包括自动配置支持、日志和YAML -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
		<!-- 测试模块，包括JUnit、Hamcrest、Mockito -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<!--<scope>test</scope>-->
		</dependency>
		<!-- 自带的服务器tomcat等 -->
		<dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>
		
		<!--web模块:查看源码可以看到这个依赖内部引入了更多的依赖,比如过spring-web,spring-webmvc,json等等,传递依赖.-->
		<dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-web</artifactId>
		 </dependency>
		<!-- 热部署模块 -->
		<dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-devtools</artifactId>
	        <optional>true</optional>
	    </dependency>
	    <!-- 添加spring-data-jpa的依赖(操作数据库的) -->
	    <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- mybatis和spring-boot整合 --> 
		<dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>1.3.2</version>
		</dependency>
		<!-- mybatis自动生成工具 -->
		<dependency>
			<groupId>org.mybatis.generator</groupId>
			<artifactId>mybatis-generator-core</artifactId>
			<version>1.3.6</version>
		</dependency>
		<!-- 分页插件 -->
		<dependency>
		    <groupId>com.github.pagehelper</groupId>
		    <artifactId>pagehelper</artifactId>
		    <version>5.1.2</version>
		</dependency>
		<!-- spring-boot整合redis -->
		<dependency>  
            <groupId>org.springframework.boot</groupId>  
            <artifactId>spring-boot-starter-data-redis</artifactId>  
        </dependency>
        <!-- json -->
		<dependency>
			<groupId>net.sf.json-lib</groupId>
			<artifactId>json-lib</artifactId>
			<version>2.4</version>
			<classifier>jdk15</classifier>
		</dependency>
		<!-- Springboot整合thymeleaf模板 -->
		<dependency>
		     <groupId>org.springframework.boot</groupId>
		     <artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<!-- 添加oracle数据库的依赖 -->
		<dependency>
		   <groupId>com.oracle</groupId>
		   <artifactId>ojdbc6</artifactId>
		   <version>11.2.0.1.0</version>
		</dependency> 
		<!-- Springboot 项目健康检查与监控 -->
		<dependency>
		     <groupId>org.springframework.boot</groupId>
		     <artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- AOP功能 -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		
		<!-- 分布式 dubbo -->
		 <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.6.0</version>
            <exclusions>
                <exclusion>
                    <artifactId>spring</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 分布式 zookeeper -->
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.4.13</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-log4j12</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 因为dubbo服务端需要注册服务到zk中，因此依赖zkClient包 -->
        <dependency>
            <groupId>com.github.sgroschupf</groupId>
            <artifactId>zkclient</artifactId>
            <version>0.1</version>
        </dependency>
		<dependency>
		<!--Java后端的AES加密和解密 -->
    	<groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		    <version>1.10</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		    <version>3.4</version>
		</dependency>

		<dependency>
			<groupId>cn.hutool</groupId>
			<artifactId>hutool-all</artifactId>
			<version>5.5.9</version>
		</dependency>

		<!--http-调用包-->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.6</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.58</version>
		</dependency>

		<!--lombok插件快速开发-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.8</version>
			<scope>provided</scope>
		</dependency>
		<!--JWT TOKEN-->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>
		<!--j2cache缓存-->
		<!--springboot1的j2cache缓存||springboot2的将artifactId改为j2cache-spring-boot2-starter-->
		<!--<dependency>
			<groupId>net.oschina.j2cache</groupId>
			<artifactId>j2cache-spring-boot2-starter</artifactId>
			<version>2.7.6-release</version>
		</dependency>
		<dependency>
			<groupId>net.oschina.j2cache</groupId>
			<artifactId>j2cache-core</artifactId>
			<version>2.7.6-release</version>
			&lt;!&ndash;需排除该包，否则会与logback冲突&ndash;&gt;
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
				<exclusion>
					<artifactId>fastjson</artifactId>
					<groupId>com.alibaba</groupId>
				</exclusion>
			</exclusions>
		</dependency>-->
		<!--ehcache缓存-->
		<!--<dependency>
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>3.8.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>2.6.11</version>
		</dependency>-->

		<!--excel导入导出框架-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>easyexcel</artifactId>
			<version>1.1.2-beat1</version>
		</dependency>

		<!--ActiveMQ消息队列-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-activemq</artifactId>
		</dependency>
		<!--消息队列连接池-->
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-pool</artifactId>
			<version>5.15.0</version>
		</dependency>
		<!-- elasticsearch启动器 (必须)-->
		<dependency>
			<groupId>org.elasticsearch</groupId>
			<artifactId>elasticsearch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-elasticsearch</artifactId>
		</dependency>
		<!--spring security-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!--引入maven插件  -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
	                <fork>true</fork>
	            </configuration>
			</plugin>
			<!--  -->
			<plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-compiler-plugin</artifactId>
		        <version>3.5.1</version>
		        <configuration>
		          <source>1.8</source>
		          <target>1.8</target>
		        </configuration>
		     </plugin>
		</plugins>
		
		<resources>
            <!-- 编译之后包含xml -->
            <resource>
                <directory>src/main/java</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <!-- 编译之后包含所有文件 -->
            <!-- 在SpringBoot中，静态资源文件都放在了src/main/resources中，此时要排除到字体的过滤，再包含进来 -->
            <!-- 否则会报Failed to decode downloaded font ... 错误 -->
            <!--maven编译时，排除了static、templates两个文件夹，其他文件有编译  -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
                <excludes>
                    <exclude>static/**</exclude>
                    <exclude>templates/**</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>static/**</include>
                    <include>templates/**</include>
                </includes>
            </resource>
        </resources>
		
	</build>
</project>
